package com.example.slapp


import android.content.Context
import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.MutableState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalConfiguration
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import com.example.slapp.ui.theme.SLAPPTheme
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.TextLayoutResult
import androidx.compose.ui.unit.sp
import androidx.navigation.compose.rememberNavController

// TODO: Implement your foreground service logic here:
//      - ensure that corner icon pops up whenever screen is touched and app is active
//      - ensure that touching the corner icon will activate lock screen settings
//      - when LOCK icon on lock screen setting is pressed: initiate override
//      - when combination is entered: deactivate override
//      - consult Mike
//      - avoid conflicts with OS-based lockscreen
//      - timeout override list by Gemini
//              1. Start timer when isLocked is set to true
//              2. When timer runs out, set isLocked to false and update SharedPreferences
//              3. in UnlockScreen, check state of isLocked in SharedPreferences and cancel unlocking (not sure why)
//      - sound override list by Gemini
//              1. Create AudioRecord to access microphone
//              2. Analyse frequency in AudioRecord
//              3. Unlock if override frequency is detected
//      - volume buttons override list by Gemini
//              1. Create BroadcastReceiver that listens for button presses
//              2. Check booleans within BroadcastReceiver
//              3. update state of the combination in SharedPreferences
//              4. in UnlockScreen, check state of combination in SharedPreferences if code correct
//      - list generated by Gemini:
//              1. create mechanism to toggle between locked and unlocked
//              2. Implement way to capture screen tap events
//              3. In accessibility service, check current mode
//              4. if unlocked business logic
//              5. if locked business logic
//              6. Update UI to reflect mode
//              7. Continue Testing


@Composable
fun rememberIsServiceLocked(): MutableState<Boolean> {
    return remember { mutableStateOf(false) }
}


class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        val navigationControllerHolder = NavigationControllerHolder()
        setContent {
            SLAPPTheme {
                val navController = rememberNavController()
                navigationControllerHolder.navController = RealNavController(navController)
                val isServiceLocked = rememberIsServiceLocked()
                AppNavigation(navigationControllerHolder.navController, isServiceLocked)
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                   MainScreen(navigationControllerHolder.navController)
                }
            }
        }
    }
}

@Composable
fun ShowCombinationButton(context: Context, message: String) {
    Button(onClick = {
        // pop up Toast showing the combination
        Toast.makeText(context, message, Toast.LENGTH_SHORT).show()
    },
        colors = ButtonDefaults.buttonColors(containerColor = Color.Blue)
    ) { Text(text = "Show combination") }
}

@Composable
fun WarningText(text: String, color: Color, modifier: Modifier){
    var textSize by remember { mutableStateOf(50.sp) }
    val configuration = LocalConfiguration.current
    Text(
        text = text,
        color = color,
        style = MaterialTheme.typography.titleLarge.copy(fontSize = textSize),
        modifier = modifier
            .fillMaxWidth(1f)
            .wrapContentSize(Alignment.Center),
        onTextLayout = { textLayoutResult: TextLayoutResult ->
                    val textWidth = textLayoutResult.size.width
                    val targetWidth = configuration.screenWidthDp.dp*2
                    if (textWidth > targetWidth.value) {
                        textSize *= (targetWidth.value / textWidth)
                    }
                }
            )
}

@Composable
fun CenterHexImage() {
    Image(
        painter = painterResource(id = R.drawable.hexsimple_2),
        contentDescription = "The Hexagon"
    )
}

@Composable
fun MainActivityContent() {
    val context = LocalContext.current
    var isServiceLocked = remember { mutableStateOf(
        context.getSharedPreferences("my_prefs", Context.MODE_PRIVATE)
            .getBoolean("isLocked", false)
    ) }

    SLAPPTheme {
        val navController = NavigationControllerHolder.getInstance().navController //
        AppNavigation(navController, isServiceLocked)
    }
}


